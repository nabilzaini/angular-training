{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../services/product.service\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/common\";\nfunction EditProductComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 4)(1, \"div\", 5)(2, \"form\", 6);\n    i0.ɵɵlistener(\"ngSubmit\", function EditProductComponent_div_4_Template_form_ngSubmit_2_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.updateProduct());\n    });\n    i0.ɵɵelementStart(3, \"div\", 7)(4, \"label\", 8);\n    i0.ɵɵtext(5, \"Name\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(6, \"input\", 9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"div\", 7)(8, \"label\", 8);\n    i0.ɵɵtext(9, \"Price\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(10, \"input\", 10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"div\", 7)(12, \"label\", 8);\n    i0.ɵɵtext(13, \"Checked\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(14, \"input\", 11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"button\", 12);\n    i0.ɵɵtext(16, \"Update\");\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"formGroup\", ctx_r0.formProductGroup);\n    i0.ɵɵadvance(13);\n    i0.ɵɵproperty(\"disabled\", ctx_r0.formProductGroup.invalid);\n  }\n}\nexport class EditProductComponent {\n  constructor(activateRoute, productService, formBuilder) {\n    this.activateRoute = activateRoute;\n    this.productService = productService;\n    this.formBuilder = formBuilder;\n    //Récupérer l'id depuis l'url à l'aide l'activateRoute\n  }\n\n  ngOnInit() {\n    this.productId = this.activateRoute.snapshot.params['id'];\n    this.productService.getProductById(this.productId).subscribe({\n      next: product => {\n        this.formProductGroup = this.formBuilder.group({\n          id: this.formBuilder.control(product.id, [Validators.required]),\n          name: this.formBuilder.control(product.name),\n          price: this.formBuilder.control(product.price),\n          checked: this.formBuilder.control(product.checked)\n        });\n      },\n      error: err => {\n        console.log(err);\n      }\n    });\n  }\n  updateProduct() {\n    let product = this.formProductGroup.value;\n    this.productService.updateProduct(product).subscribe({\n      next: productUpdated => {\n        alert(JSON.stringify(product) + ' have been updated with success');\n      },\n      error: err => {\n        console.log(err);\n      }\n    });\n  }\n  static #_ = this.ɵfac = function EditProductComponent_Factory(t) {\n    return new (t || EditProductComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.ProductService), i0.ɵɵdirectiveInject(i3.FormBuilder));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: EditProductComponent,\n    selectors: [[\"app-edit-product\"]],\n    decls: 5,\n    vars: 2,\n    consts: [[1, \"card\"], [1, \"card-header\"], [1, \"card-body\"], [\"class\", \"row\", 4, \"ngIf\"], [1, \"row\"], [1, \"col-md-6\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"mb-3\"], [1, \"form-label\"], [\"formControlName\", \"name\", 1, \"form-control\"], [\"formControlName\", \"price\", 1, \"form-control\"], [\"type\", \"checkbox\", \"formControlName\", \"checked\", 1, \"form-check-input\"], [1, \"btn\", \"btn-success\", 3, \"disabled\"]],\n    template: function EditProductComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n        i0.ɵɵtext(2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 2);\n        i0.ɵɵtemplate(4, EditProductComponent_div_4_Template, 17, 2, \"div\", 3);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" Product ID = \", ctx.productId, \" \");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.formProductGroup);\n      }\n    },\n    dependencies: [i4.NgIf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.CheckboxControlValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName],\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"AACA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;;;;;;ICI3DC,8BAA0C;IAEIA;MAAAA;MAAA;MAAA,OAAYA,qCAAe;IAAA,EAAC;IAC7DA,8BAAkB;IACYA,oBAAI;IAAAA,iBAAQ;IACtCA,2BAAmD;IACvDA,iBAAM;IACNA,8BAAkB;IACYA,qBAAK;IAAAA,iBAAQ;IACvCA,6BAAoD;IACxDA,iBAAM;IACNA,+BAAkB;IACYA,wBAAO;IAAAA,iBAAQ;IACzCA,6BAA0E;IAC9EA,iBAAM;IACNA,mCAAsE;IAAAA,uBAAM;IAAAA,iBAAS;;;;IAbnFA,eAA8B;IAA9BA,mDAA8B;IAaxBA,gBAAqC;IAArCA,0DAAqC;;;ADTlE,OAAM,MAAOC,oBAAoB;EAK/BC,YAAoBC,aAA4B,EAAUC,cAA6B,EAAUC,WAAuB;IAApG,kBAAa,GAAbF,aAAa;IAAyB,mBAAc,GAAdC,cAAc;IAAyB,gBAAW,GAAXC,WAAW;IAC1G;EACF;;EACAC,QAAQ;IACN,IAAI,CAACC,SAAS,GAAG,IAAI,CAACJ,aAAa,CAACK,QAAQ,CAACC,MAAM,CAAC,IAAI,CAAC;IACzD,IAAI,CAACL,cAAc,CAACM,cAAc,CAAC,IAAI,CAACH,SAAS,CAAC,CAACI,SAAS,CAAC;MAC3DC,IAAI,EAAEC,OAAO,IAAG;QACd,IAAI,CAACC,gBAAgB,GAAG,IAAI,CAACT,WAAW,CAACU,KAAK,CAAC;UAC7CC,EAAE,EAAE,IAAI,CAACX,WAAW,CAACY,OAAO,CAACJ,OAAO,CAACG,EAAE,EAAE,CAACjB,UAAU,CAACmB,QAAQ,CAAC,CAAC;UAC/DC,IAAI,EAAE,IAAI,CAACd,WAAW,CAACY,OAAO,CAACJ,OAAO,CAACM,IAAI,CAAC;UAC5CC,KAAK,EAAE,IAAI,CAACf,WAAW,CAACY,OAAO,CAACJ,OAAO,CAACO,KAAK,CAAC;UAC9CC,OAAO,EAAE,IAAI,CAAChB,WAAW,CAACY,OAAO,CAACJ,OAAO,CAACQ,OAAO;SAClD,CAAC;MACJ,CAAC;MACDC,KAAK,EAAEC,GAAG,IAAG;QAAEC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;MAAC;KACjC,CAAC;EACJ;EACAG,aAAa;IACX,IAAIb,OAAO,GAAW,IAAI,CAACC,gBAAgB,CAACa,KAAK;IACjD,IAAI,CAACvB,cAAc,CAACsB,aAAa,CAACb,OAAO,CAAC,CAACF,SAAS,CAAC;MACnDC,IAAI,EAAEgB,cAAc,IAAG;QACrBC,KAAK,CAACC,IAAI,CAACC,SAAS,CAAClB,OAAO,CAAC,GAAG,iCAAiC,CAAC;MACpE,CAAC;MACDS,KAAK,EAAEC,GAAG,IAAG;QAAEC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;MAAC;KACjC,CAAC;EACJ;EAAC;qBA9BUtB,oBAAoB;EAAA;EAAA;UAApBA,oBAAoB;IAAA+B;IAAAC;IAAAC;IAAAC;IAAAC;MAAA;QCXjCpC,8BAAkB;QAEXA,YACH;QAAAA,iBAAM;QACNA,8BAAuB;QACnBA,sEAkBM;QACVA,iBAAM;;;QAtBHA,eACH;QADGA,2DACH;QAEsBA,eAAsB;QAAtBA,2CAAsB","names":["Validators","i0","EditProductComponent","constructor","activateRoute","productService","formBuilder","ngOnInit","productId","snapshot","params","getProductById","subscribe","next","product","formProductGroup","group","id","control","required","name","price","checked","error","err","console","log","updateProduct","value","productUpdated","alert","JSON","stringify","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["/home/zaini/Documents/Nabil/workspace-entrainement/angular/angular-training/src/app/edit-product/edit-product.component.ts","/home/zaini/Documents/Nabil/workspace-entrainement/angular/angular-training/src/app/edit-product/edit-product.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { Product } from '../model/product.model';\nimport { ProductService } from '../services/product.service';\n\n@Component({\n  selector: 'app-edit-product',\n  templateUrl: './edit-product.component.html',\n  styleUrls: ['./edit-product.component.css']\n})\nexport class EditProductComponent implements OnInit{\n\n  productId!: number;\n  formProductGroup!: FormGroup;\n \n  constructor(private activateRoute:ActivatedRoute, private productService:ProductService, private formBuilder:FormBuilder){\n    //Récupérer l'id depuis l'url à l'aide l'activateRoute\n  }\n  ngOnInit(): void {\n    this.productId = this.activateRoute.snapshot.params['id'];\n    this.productService.getProductById(this.productId).subscribe({\n      next: product => {\n        this.formProductGroup = this.formBuilder.group({\n          id: this.formBuilder.control(product.id, [Validators.required]),\n          name: this.formBuilder.control(product.name),\n          price: this.formBuilder.control(product.price),\n          checked: this.formBuilder.control(product.checked)\n        })\n      },\n      error: err => {console.log(err);}      \n    });\n  }\n  updateProduct() {\n    let product:Product = this.formProductGroup.value;\n    this.productService.updateProduct(product).subscribe({\n      next: productUpdated => {\n        alert(JSON.stringify(product) + ' have been updated with success')\n      },\n      error: err => {console.log(err);}\n    })\n  }\n}\n","<div class=\"card\">\n    <div class=\"card-header\">\n       Product ID =  {{productId}}\n    </div>\n    <div class=\"card-body\">\n        <div class=\"row\" *ngIf=\"formProductGroup\">\n            <div class=\"col-md-6\">\n                 <form [formGroup]=\"formProductGroup\" (ngSubmit)=\"updateProduct()\">\n                     <div class=\"mb-3\">\n                         <label class=\"form-label\">Name</label>\n                         <input class=\"form-control\" formControlName=\"name\">\n                     </div>\n                     <div class=\"mb-3\">\n                         <label class=\"form-label\">Price</label>\n                         <input class=\"form-control\" formControlName=\"price\">\n                     </div>\n                     <div class=\"mb-3\">\n                         <label class=\"form-label\">Checked</label>\n                         <input type=\"checkbox\" class=\"form-check-input\" formControlName=\"checked\">\n                     </div>\n                     <button [disabled]=\"formProductGroup.invalid\" class=\"btn btn-success\">Update</button>\n                 </form>\n            </div> \n        </div>\n    </div>\n\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}